# Generated by Django 5.2.4 on 2025-07-06 20:27

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AlarmRule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=150, verbose_name='Kural Adı')),
                ('condition', models.CharField(choices=[('gt', 'Büyüktür'), ('lt', 'Küçüktür'), ('eq', 'Eşittir')], max_length=10, verbose_name='Koşul')),
                ('threshold', models.FloatField(verbose_name='Eşik Değeri')),
                ('severity', models.CharField(choices=[('info', 'Bilgi'), ('warning', 'Uyarı'), ('critical', 'Kritik'), ('fault', 'Hata')], default='warning', max_length=10, verbose_name='Önem Seviyesi')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif mi?')),
            ],
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Cihazın adı veya tanımı (Örn: Kazan Dairesi PLC)', max_length=100, unique=True)),
                ('connection_host', models.CharField(help_text='Cihazın bağlantı adresi (IP veya hostname)', max_length=100)),
                ('port', models.IntegerField(default=502, help_text='Modbus TCP portu')),
                ('slave_id', models.IntegerField(default=1, verbose_name='Slave ID / Unit ID')),
                ('is_active', models.BooleanField(default=True, help_text='Bu cihazdan veri okunacak mı?')),
                ('status', models.CharField(choices=[('online', 'Çevrimiçi'), ('offline', 'Çevrimdışı')], default='offline', max_length=10, verbose_name='Cihaz Durumu')),
                ('last_seen', models.DateTimeField(blank=True, null=True, verbose_name='Son Görülme')),
            ],
            options={
                'verbose_name': 'Cihaz',
                'verbose_name_plural': 'Cihazlar',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AlarmLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('ACTIVE_UNACK', 'Aktif, Onaylanmamış'), ('ACTIVE_ACK', 'Aktif, Onaylanmış'), ('CLEARED_UNACK', 'Normale Döndü, Onaylanmamış'), ('CLEARED_ACK', 'Normale Döndü, Onaylandı')], default='ACTIVE_UNACK', max_length=20)),
                ('acknowledged_time', models.DateTimeField(blank=True, null=True)),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('alarm_rule', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='monitoring.alarmrule')),
            ],
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="Register'ın tanımı (Örn: Sıcaklık, Basınç)", max_length=100)),
                ('address', models.IntegerField(help_text='Register adresi (örn: 40001, 1)')),
                ('register_type', models.CharField(choices=[('holding', 'Holding Register'), ('coil', 'Coil'), ('input', 'Input Register'), ('discrete_input', 'Discrete Input')], max_length=20)),
                ('is_writable', models.BooleanField(default=False, help_text="Bu register'a yazma işlemi yapılabilir mi?")),
                ('data_type', models.CharField(choices=[('UINT16', '16-bit Unsigned Int'), ('INT16', '16-bit Signed Int'), ('UINT32', '32-bit Unsigned Int'), ('INT32', '32-bit Signed Int'), ('FLOAT32', '32-bit Float'), ('STRING', 'String (Metin)')], default='UINT16', max_length=10, verbose_name='Veri Tipi')),
                ('byte_order', models.CharField(choices=[('BIG', 'Big-Endian (ABCD)'), ('LITTLE', 'Little-Endian (DCBA)')], default='BIG', max_length=10, verbose_name='Byte/Word Sırası')),
                ('min_value', models.FloatField(blank=True, help_text='Kadran/Bar için alt limit (opsiyonel)', null=True, verbose_name='Minimum Değer')),
                ('max_value', models.FloatField(blank=True, help_text='Kadran/Bar için üst limit (opsiyonel)', null=True, verbose_name='Maksimum Değer')),
                ('show_on_statusbar', models.BooleanField(default=False, verbose_name='Durum Çubuğunda Göster')),
                ('icon_name', models.CharField(blank=True, help_text='Örn: bi-thermometer-half. Boş bırakılabilir.', max_length=50, null=True, verbose_name='Bootstrap İkon Adı')),
                ('scaling_factor', models.FloatField(default=1.0, help_text="Gelen ham değeri bu sayıyla çarp. 10'a bölmek için 0.1, 100'e bölmek için 0.01 girin.", verbose_name='Değer Çarpanı')),
                ('invert_value', models.BooleanField(default=False, help_text="İşaretlenirse, bu register'dan okunan 0 değeri 1, 1 değeri ise 0 olarak işlenir. Sadece Coil ve Discrete Input için geçerlidir.", verbose_name='Değeri Tersle (0->1, 1->0)')),
                ('string_length', models.PositiveSmallIntegerField(default=1, help_text="Eğer Veri Tipi 'String' ise, kaç register'lık veri okunacağını belirtir.", verbose_name='String Uzunluğu (Register)')),
                ('display_preference', models.CharField(choices=[('numeric', 'Sayısal Gösterim'), ('enum', 'Metin Eşleştirme (Enum)')], default='numeric', max_length=20, verbose_name='Gösterim Tercihi')),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='registers', to='monitoring.device')),
            ],
        ),
        migrations.CreateModel(
            name='DashboardWidget',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_page', models.CharField(choices=[('status_panel', 'Durum Paneli'), ('mosaic_dashboard', 'Mozaik Pano')], default='mosaic_dashboard', max_length=20, verbose_name='Hedef Sayfa')),
                ('name', models.CharField(max_length=100, verbose_name='Panel Başlığı')),
                ('order', models.PositiveIntegerField(default=100, help_text='Düşük numaralar daha üstte görünür.', verbose_name='Görünüm Sırası')),
                ('widget_type', models.CharField(choices=[('line_chart', 'Çizgi Grafik'), ('gauge', 'Kadran (Gauge)'), ('digital', 'Sayısal Gösterge'), ('indicator', 'Durum Işığı'), ('enum_display', 'Metin Eşleştirme (Enum)'), ('event_log', 'Canlı Olay Akışı')], default='digital', max_length=20, verbose_name='Gösterim Tipi')),
                ('style', models.CharField(choices=[('primary', 'Normal (Mavi)'), ('secondary', 'İkincil (Gri)'), ('warning', 'Uyarı (Sarı)'), ('danger', 'Tehlike (Kırmızı)')], default='primary', max_length=20, verbose_name='Panel Stili')),
                ('grid_x', models.PositiveIntegerField(default=0, verbose_name='Grid X Konumu')),
                ('grid_y', models.PositiveIntegerField(default=0, verbose_name='Grid Y Konumu')),
                ('grid_width', models.PositiveIntegerField(default=4, verbose_name='Grid Genişliği (1-12 arası)')),
                ('grid_height', models.PositiveIntegerField(default=4, verbose_name='Grid Yüksekliği')),
                ('background_theme', models.CharField(choices=[('none', 'Yok (Standart)'), ('rain-1', 'Yağmur Teması'), ('rain-2', 'Yağmur Teması - Pencere'), ('solar-1', 'Güneş Teması'), ('sis-1', 'Sis Teması - puslu'), ('nem-1', 'Nem Teması - deneme'), ('sicaklik-1', 'Sicak Teması - deneme'), ('tema1', 'tema1 Teması'), ('tema2', 'tema2 Teması'), ('kritik', 'Kritik Durum Teması'), ('yagmur', 'Yağmur Teması'), ('solar', 'Güneş Teması'), ('nem', 'Nem Teması'), ('sis', 'Sis Teması'), ('sicaklik', 'Sıcaklık Teması')], default='none', max_length=20, verbose_name='Arka Plan Teması')),
                ('registers', models.ManyToManyField(blank=True, related_name='widgets', to='monitoring.register', verbose_name="Panele Dahil Edilecek Register'lar")),
                ('trigger_register', models.ForeignKey(blank=True, help_text="Bu panelin görünmesi için hangi register'ın AÇIK (1) olması gerekir? Boş bırakılırsa her zaman görünür.", limit_choices_to={'register_type': 'coil'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='triggered_widgets', to='monitoring.register')),
            ],
            options={
                'verbose_name': 'Pano Bileşeni',
                'verbose_name_plural': 'Pano Bileşenleri',
                'ordering': ['order'],
            },
        ),
        migrations.AddField(
            model_name='alarmrule',
            name='register',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alarm_rules', to='monitoring.register'),
        ),
        migrations.CreateModel(
            name='ScheduledTask',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_to_run', models.TimeField()),
                ('action', models.BooleanField(choices=[(True, 'AÇIK'), (False, 'KAPALI')], default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('register', models.ForeignKey(limit_choices_to={'is_writable': True, 'register_type': 'coil'}, on_delete=django.db.models.deletion.CASCADE, to='monitoring.register')),
            ],
        ),
        migrations.CreateModel(
            name='TestRun',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=200, verbose_name='Test Adı')),
                ('customer_name', models.CharField(blank=True, max_length=200, null=True, verbose_name='Müşteri Adı')),
                ('product_details', models.TextField(blank=True, null=True, verbose_name='Test Edilen Ürün Detayları')),
                ('status', models.CharField(choices=[('NOT_STARTED', 'Başlamadı'), ('RUNNING', 'Çalışıyor'), ('PAUSED', 'Duraklatıldı'), ('COMPLETED', 'Tamamlandı'), ('ABORTED', 'İptal Edildi')], default='NOT_STARTED', max_length=20)),
                ('target_duration_seconds', models.PositiveIntegerField(default=18000000, verbose_name='Hedef Süre (saniye)')),
                ('elapsed_seconds', models.PositiveIntegerField(default=0, verbose_name='Geçen Toplam Süre (saniye)')),
                ('start_time', models.DateTimeField(blank=True, null=True, verbose_name='Başlangıç Zamanı')),
                ('end_time', models.DateTimeField(blank=True, null=True, verbose_name='Bitiş Zamanı')),
                ('last_resumed_time', models.DateTimeField(blank=True, null=True, verbose_name='Son Devam Etme Zamanı')),
                ('control_coil', models.ForeignKey(blank=True, limit_choices_to={'is_writable': True, 'register_type': 'coil'}, null=True, on_delete=django.db.models.deletion.SET_NULL, to='monitoring.register', verbose_name='Test Kontrol Coili')),
            ],
            options={
                'verbose_name': 'Test Seansı',
                'verbose_name_plural': 'Test Seansları',
                'ordering': ['-start_time'],
            },
        ),
        migrations.CreateModel(
            name='TestEventLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('event_type', models.CharField(choices=[('START', 'Test Başlatıldı'), ('PAUSE', 'Test Duraklatıldı'), ('RESUME', 'Test Devam Ettirildi'), ('COMPLETE', 'Test Tamamlandı'), ('ABORT', 'Test İptal Edildi')], max_length=20)),
                ('notes', models.TextField(blank=True, verbose_name='Notlar')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('test_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_logs', to='monitoring.testrun')),
            ],
            options={
                'verbose_name': 'Test Olay Kaydı',
                'verbose_name_plural': 'Test Olay Kayıtları',
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='DataPoint',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.FloatField()),
                ('timestamp', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datapoints', to='monitoring.register')),
                ('test_run', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='datapoints', to='monitoring.testrun')),
            ],
        ),
        migrations.CreateModel(
            name='EnumValue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('raw_value', models.IntegerField(verbose_name='Gelen Ham Değer')),
                ('label', models.CharField(max_length=100, verbose_name='Gösterilecek Etiket')),
                ('register', models.ForeignKey(limit_choices_to={'display_preference': 'enum'}, on_delete=django.db.models.deletion.CASCADE, related_name='enum_values', to='monitoring.register', verbose_name='Ana Register')),
            ],
            options={
                'verbose_name': 'Numaralandırılmış Değer Eşleşmesi',
                'verbose_name_plural': 'Numaralandırılmış Değer Eşleşmeleri',
                'ordering': ['raw_value'],
                'unique_together': {('register', 'raw_value')},
            },
        ),
        migrations.CreateModel(
            name='RegisterMapping',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Bu senkronizasyon kuralı için açıklayıcı bir isim (örn: Ana Pompa -> Yedek Pompa).', max_length=150, verbose_name='Kural Adı')),
                ('is_active', models.BooleanField(default=True, verbose_name='Bu Kural Aktif mi?')),
                ('destination_register', models.ForeignKey(limit_choices_to={'is_writable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='destination_mappings', to='monitoring.register', verbose_name='Hedef Register (Değeri Güncellenecek)')),
                ('source_register', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='source_mappings', to='monitoring.register', verbose_name='Kaynak Register (Değişimi İzlenecek)')),
            ],
            options={
                'verbose_name': 'Register Eşleştirmesi',
                'verbose_name_plural': 'Register Eşleştirmeleri',
                'unique_together': {('source_register', 'destination_register')},
            },
        ),
    ]
